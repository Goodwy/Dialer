// Generated by view binder compiler. Do not edit!
package com.goodwy.dialer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.goodwy.commons.views.MyRecyclerView;
import com.goodwy.commons.views.MyTextView;
import com.goodwy.dialer.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCallHistoryBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppCompatButton blockButton;

  @NonNull
  public final AppBarLayout callHistoryAppbar;

  @NonNull
  public final ImageView callHistoryFavoriteIcon;

  @NonNull
  public final RelativeLayout callHistoryHolder;

  @NonNull
  public final MyRecyclerView callHistoryList;

  @NonNull
  public final ConstraintLayout callHistoryListContainer;

  @NonNull
  public final MyTextView callHistoryNumber;

  @NonNull
  public final RelativeLayout callHistoryNumberContainer;

  @NonNull
  public final MyTextView callHistoryNumberType;

  @NonNull
  public final LinearLayout callHistoryNumberTypeContainer;

  @NonNull
  public final MyTextView callHistoryPlaceholder;

  @NonNull
  public final FrameLayout callHistoryPlaceholderContainer;

  @NonNull
  public final NestedScrollView callHistoryScrollview;

  @NonNull
  public final MaterialToolbar callHistoryToolbar;

  @NonNull
  public final CoordinatorLayout callHistoryWrapper;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final ConstraintLayout contactActionsHolder;

  @NonNull
  public final LinearLayout contactEmailsHolder;

  @NonNull
  public final LinearLayout contactEventsHolder;

  @NonNull
  public final LinearLayout contactMessengersActionsHolder;

  @NonNull
  public final RelativeLayout defaultSim1Button;

  @NonNull
  public final ImageView defaultSim1Icon;

  @NonNull
  public final TextView defaultSim1Id;

  @NonNull
  public final RelativeLayout defaultSim2Button;

  @NonNull
  public final ImageView defaultSim2Icon;

  @NonNull
  public final TextView defaultSim2Id;

  @NonNull
  public final RelativeLayout defaultSimButtonContainer;

  @NonNull
  public final MyTextView defaultSimButtonLabel;

  @NonNull
  public final AppCompatButton fourButton;

  @NonNull
  public final AppCompatButton oneButton;

  @NonNull
  public final AppCompatButton threeButton;

  @NonNull
  public final TopViewBinding topDetails;

  @NonNull
  public final AppCompatButton twoButton;

  @NonNull
  public final Guideline x25;

  @NonNull
  public final Guideline x50;

  @NonNull
  public final Guideline x75;

  private ActivityCallHistoryBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppCompatButton blockButton, @NonNull AppBarLayout callHistoryAppbar,
      @NonNull ImageView callHistoryFavoriteIcon, @NonNull RelativeLayout callHistoryHolder,
      @NonNull MyRecyclerView callHistoryList, @NonNull ConstraintLayout callHistoryListContainer,
      @NonNull MyTextView callHistoryNumber, @NonNull RelativeLayout callHistoryNumberContainer,
      @NonNull MyTextView callHistoryNumberType,
      @NonNull LinearLayout callHistoryNumberTypeContainer,
      @NonNull MyTextView callHistoryPlaceholder,
      @NonNull FrameLayout callHistoryPlaceholderContainer,
      @NonNull NestedScrollView callHistoryScrollview, @NonNull MaterialToolbar callHistoryToolbar,
      @NonNull CoordinatorLayout callHistoryWrapper,
      @NonNull CollapsingToolbarLayout collapsingToolbar,
      @NonNull ConstraintLayout contactActionsHolder, @NonNull LinearLayout contactEmailsHolder,
      @NonNull LinearLayout contactEventsHolder,
      @NonNull LinearLayout contactMessengersActionsHolder,
      @NonNull RelativeLayout defaultSim1Button, @NonNull ImageView defaultSim1Icon,
      @NonNull TextView defaultSim1Id, @NonNull RelativeLayout defaultSim2Button,
      @NonNull ImageView defaultSim2Icon, @NonNull TextView defaultSim2Id,
      @NonNull RelativeLayout defaultSimButtonContainer, @NonNull MyTextView defaultSimButtonLabel,
      @NonNull AppCompatButton fourButton, @NonNull AppCompatButton oneButton,
      @NonNull AppCompatButton threeButton, @NonNull TopViewBinding topDetails,
      @NonNull AppCompatButton twoButton, @NonNull Guideline x25, @NonNull Guideline x50,
      @NonNull Guideline x75) {
    this.rootView = rootView;
    this.blockButton = blockButton;
    this.callHistoryAppbar = callHistoryAppbar;
    this.callHistoryFavoriteIcon = callHistoryFavoriteIcon;
    this.callHistoryHolder = callHistoryHolder;
    this.callHistoryList = callHistoryList;
    this.callHistoryListContainer = callHistoryListContainer;
    this.callHistoryNumber = callHistoryNumber;
    this.callHistoryNumberContainer = callHistoryNumberContainer;
    this.callHistoryNumberType = callHistoryNumberType;
    this.callHistoryNumberTypeContainer = callHistoryNumberTypeContainer;
    this.callHistoryPlaceholder = callHistoryPlaceholder;
    this.callHistoryPlaceholderContainer = callHistoryPlaceholderContainer;
    this.callHistoryScrollview = callHistoryScrollview;
    this.callHistoryToolbar = callHistoryToolbar;
    this.callHistoryWrapper = callHistoryWrapper;
    this.collapsingToolbar = collapsingToolbar;
    this.contactActionsHolder = contactActionsHolder;
    this.contactEmailsHolder = contactEmailsHolder;
    this.contactEventsHolder = contactEventsHolder;
    this.contactMessengersActionsHolder = contactMessengersActionsHolder;
    this.defaultSim1Button = defaultSim1Button;
    this.defaultSim1Icon = defaultSim1Icon;
    this.defaultSim1Id = defaultSim1Id;
    this.defaultSim2Button = defaultSim2Button;
    this.defaultSim2Icon = defaultSim2Icon;
    this.defaultSim2Id = defaultSim2Id;
    this.defaultSimButtonContainer = defaultSimButtonContainer;
    this.defaultSimButtonLabel = defaultSimButtonLabel;
    this.fourButton = fourButton;
    this.oneButton = oneButton;
    this.threeButton = threeButton;
    this.topDetails = topDetails;
    this.twoButton = twoButton;
    this.x25 = x25;
    this.x50 = x50;
    this.x75 = x75;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCallHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCallHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_call_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCallHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.blockButton;
      AppCompatButton blockButton = ViewBindings.findChildViewById(rootView, id);
      if (blockButton == null) {
        break missingId;
      }

      id = R.id.call_history_appbar;
      AppBarLayout callHistoryAppbar = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryAppbar == null) {
        break missingId;
      }

      id = R.id.call_history_favorite_icon;
      ImageView callHistoryFavoriteIcon = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryFavoriteIcon == null) {
        break missingId;
      }

      id = R.id.callHistoryHolder;
      RelativeLayout callHistoryHolder = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryHolder == null) {
        break missingId;
      }

      id = R.id.callHistoryList;
      MyRecyclerView callHistoryList = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryList == null) {
        break missingId;
      }

      id = R.id.callHistoryListContainer;
      ConstraintLayout callHistoryListContainer = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryListContainer == null) {
        break missingId;
      }

      id = R.id.call_history_number;
      MyTextView callHistoryNumber = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryNumber == null) {
        break missingId;
      }

      id = R.id.call_history_number_container;
      RelativeLayout callHistoryNumberContainer = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryNumberContainer == null) {
        break missingId;
      }

      id = R.id.call_history_number_type;
      MyTextView callHistoryNumberType = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryNumberType == null) {
        break missingId;
      }

      id = R.id.call_history_number_type_container;
      LinearLayout callHistoryNumberTypeContainer = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryNumberTypeContainer == null) {
        break missingId;
      }

      id = R.id.call_history_placeholder;
      MyTextView callHistoryPlaceholder = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryPlaceholder == null) {
        break missingId;
      }

      id = R.id.call_history_placeholder_container;
      FrameLayout callHistoryPlaceholderContainer = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryPlaceholderContainer == null) {
        break missingId;
      }

      id = R.id.callHistoryScrollview;
      NestedScrollView callHistoryScrollview = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryScrollview == null) {
        break missingId;
      }

      id = R.id.callHistoryToolbar;
      MaterialToolbar callHistoryToolbar = ViewBindings.findChildViewById(rootView, id);
      if (callHistoryToolbar == null) {
        break missingId;
      }

      CoordinatorLayout callHistoryWrapper = (CoordinatorLayout) rootView;

      id = R.id.collapsingToolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.contactActionsHolder;
      ConstraintLayout contactActionsHolder = ViewBindings.findChildViewById(rootView, id);
      if (contactActionsHolder == null) {
        break missingId;
      }

      id = R.id.contact_emails_holder;
      LinearLayout contactEmailsHolder = ViewBindings.findChildViewById(rootView, id);
      if (contactEmailsHolder == null) {
        break missingId;
      }

      id = R.id.contact_events_holder;
      LinearLayout contactEventsHolder = ViewBindings.findChildViewById(rootView, id);
      if (contactEventsHolder == null) {
        break missingId;
      }

      id = R.id.contact_messengers_actions_holder;
      LinearLayout contactMessengersActionsHolder = ViewBindings.findChildViewById(rootView, id);
      if (contactMessengersActionsHolder == null) {
        break missingId;
      }

      id = R.id.defaultSim1Button;
      RelativeLayout defaultSim1Button = ViewBindings.findChildViewById(rootView, id);
      if (defaultSim1Button == null) {
        break missingId;
      }

      id = R.id.defaultSim1Icon;
      ImageView defaultSim1Icon = ViewBindings.findChildViewById(rootView, id);
      if (defaultSim1Icon == null) {
        break missingId;
      }

      id = R.id.defaultSim1Id;
      TextView defaultSim1Id = ViewBindings.findChildViewById(rootView, id);
      if (defaultSim1Id == null) {
        break missingId;
      }

      id = R.id.defaultSim2Button;
      RelativeLayout defaultSim2Button = ViewBindings.findChildViewById(rootView, id);
      if (defaultSim2Button == null) {
        break missingId;
      }

      id = R.id.defaultSim2Icon;
      ImageView defaultSim2Icon = ViewBindings.findChildViewById(rootView, id);
      if (defaultSim2Icon == null) {
        break missingId;
      }

      id = R.id.defaultSim2Id;
      TextView defaultSim2Id = ViewBindings.findChildViewById(rootView, id);
      if (defaultSim2Id == null) {
        break missingId;
      }

      id = R.id.defaultSimButtonContainer;
      RelativeLayout defaultSimButtonContainer = ViewBindings.findChildViewById(rootView, id);
      if (defaultSimButtonContainer == null) {
        break missingId;
      }

      id = R.id.defaultSimButtonLabel;
      MyTextView defaultSimButtonLabel = ViewBindings.findChildViewById(rootView, id);
      if (defaultSimButtonLabel == null) {
        break missingId;
      }

      id = R.id.fourButton;
      AppCompatButton fourButton = ViewBindings.findChildViewById(rootView, id);
      if (fourButton == null) {
        break missingId;
      }

      id = R.id.oneButton;
      AppCompatButton oneButton = ViewBindings.findChildViewById(rootView, id);
      if (oneButton == null) {
        break missingId;
      }

      id = R.id.threeButton;
      AppCompatButton threeButton = ViewBindings.findChildViewById(rootView, id);
      if (threeButton == null) {
        break missingId;
      }

      id = R.id.topDetails;
      View topDetails = ViewBindings.findChildViewById(rootView, id);
      if (topDetails == null) {
        break missingId;
      }
      TopViewBinding binding_topDetails = TopViewBinding.bind(topDetails);

      id = R.id.twoButton;
      AppCompatButton twoButton = ViewBindings.findChildViewById(rootView, id);
      if (twoButton == null) {
        break missingId;
      }

      id = R.id.x25;
      Guideline x25 = ViewBindings.findChildViewById(rootView, id);
      if (x25 == null) {
        break missingId;
      }

      id = R.id.x50;
      Guideline x50 = ViewBindings.findChildViewById(rootView, id);
      if (x50 == null) {
        break missingId;
      }

      id = R.id.x75;
      Guideline x75 = ViewBindings.findChildViewById(rootView, id);
      if (x75 == null) {
        break missingId;
      }

      return new ActivityCallHistoryBinding((CoordinatorLayout) rootView, blockButton,
          callHistoryAppbar, callHistoryFavoriteIcon, callHistoryHolder, callHistoryList,
          callHistoryListContainer, callHistoryNumber, callHistoryNumberContainer,
          callHistoryNumberType, callHistoryNumberTypeContainer, callHistoryPlaceholder,
          callHistoryPlaceholderContainer, callHistoryScrollview, callHistoryToolbar,
          callHistoryWrapper, collapsingToolbar, contactActionsHolder, contactEmailsHolder,
          contactEventsHolder, contactMessengersActionsHolder, defaultSim1Button, defaultSim1Icon,
          defaultSim1Id, defaultSim2Button, defaultSim2Icon, defaultSim2Id,
          defaultSimButtonContainer, defaultSimButtonLabel, fourButton, oneButton, threeButton,
          binding_topDetails, twoButton, x25, x50, x75);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
