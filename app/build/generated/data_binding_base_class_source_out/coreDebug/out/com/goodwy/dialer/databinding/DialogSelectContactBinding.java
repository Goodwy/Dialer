// Generated by view binder compiler. Do not edit!
package com.goodwy.dialer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.goodwy.commons.views.MyRecyclerView;
import com.goodwy.commons.views.MySearchMenu;
import com.goodwy.commons.views.MyTextView;
import com.goodwy.dialer.R;
import com.reddit.indicatorfastscroll.FastScrollerThumbView;
import com.reddit.indicatorfastscroll.FastScrollerView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogSelectContactBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MySearchMenu contactSearchView;

  @NonNull
  public final MyTextView contactsEmptyPlaceholder;

  @NonNull
  public final FastScrollerView letterFastscroller;

  @NonNull
  public final FastScrollerThumbView letterFastscrollerThumb;

  @NonNull
  public final RelativeLayout selectContactHolder;

  @NonNull
  public final MyRecyclerView selectContactList;

  private DialogSelectContactBinding(@NonNull RelativeLayout rootView,
      @NonNull MySearchMenu contactSearchView, @NonNull MyTextView contactsEmptyPlaceholder,
      @NonNull FastScrollerView letterFastscroller,
      @NonNull FastScrollerThumbView letterFastscrollerThumb,
      @NonNull RelativeLayout selectContactHolder, @NonNull MyRecyclerView selectContactList) {
    this.rootView = rootView;
    this.contactSearchView = contactSearchView;
    this.contactsEmptyPlaceholder = contactsEmptyPlaceholder;
    this.letterFastscroller = letterFastscroller;
    this.letterFastscrollerThumb = letterFastscrollerThumb;
    this.selectContactHolder = selectContactHolder;
    this.selectContactList = selectContactList;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogSelectContactBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogSelectContactBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_select_contact, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogSelectContactBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.contact_search_view;
      MySearchMenu contactSearchView = ViewBindings.findChildViewById(rootView, id);
      if (contactSearchView == null) {
        break missingId;
      }

      id = R.id.contacts_empty_placeholder;
      MyTextView contactsEmptyPlaceholder = ViewBindings.findChildViewById(rootView, id);
      if (contactsEmptyPlaceholder == null) {
        break missingId;
      }

      id = R.id.letter_fastscroller;
      FastScrollerView letterFastscroller = ViewBindings.findChildViewById(rootView, id);
      if (letterFastscroller == null) {
        break missingId;
      }

      id = R.id.letter_fastscroller_thumb;
      FastScrollerThumbView letterFastscrollerThumb = ViewBindings.findChildViewById(rootView, id);
      if (letterFastscrollerThumb == null) {
        break missingId;
      }

      RelativeLayout selectContactHolder = (RelativeLayout) rootView;

      id = R.id.select_contact_list;
      MyRecyclerView selectContactList = ViewBindings.findChildViewById(rootView, id);
      if (selectContactList == null) {
        break missingId;
      }

      return new DialogSelectContactBinding((RelativeLayout) rootView, contactSearchView,
          contactsEmptyPlaceholder, letterFastscroller, letterFastscrollerThumb,
          selectContactHolder, selectContactList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
