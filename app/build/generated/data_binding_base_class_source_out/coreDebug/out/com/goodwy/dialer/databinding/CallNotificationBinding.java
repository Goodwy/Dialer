// Generated by view binder compiler. Do not edit!
package com.goodwy.dialer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.goodwy.dialer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CallNotificationBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView notificationAcceptCall;

  @NonNull
  public final LinearLayout notificationActionsCallHolder;

  @NonNull
  public final LinearLayout notificationActionsHolder;

  @NonNull
  public final TextView notificationCallStatus;

  @NonNull
  public final TextView notificationCallerName;

  @NonNull
  public final TextView notificationCallerNumberType;

  @NonNull
  public final ImageView notificationDeclineCall;

  @NonNull
  public final Button notificationDeclineCallText;

  @NonNull
  public final RelativeLayout notificationHolder;

  @NonNull
  public final Button notificationMuteText;

  @NonNull
  public final ImageView notificationThumbnail;

  private CallNotificationBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView notificationAcceptCall,
      @NonNull LinearLayout notificationActionsCallHolder,
      @NonNull LinearLayout notificationActionsHolder, @NonNull TextView notificationCallStatus,
      @NonNull TextView notificationCallerName, @NonNull TextView notificationCallerNumberType,
      @NonNull ImageView notificationDeclineCall, @NonNull Button notificationDeclineCallText,
      @NonNull RelativeLayout notificationHolder, @NonNull Button notificationMuteText,
      @NonNull ImageView notificationThumbnail) {
    this.rootView = rootView;
    this.notificationAcceptCall = notificationAcceptCall;
    this.notificationActionsCallHolder = notificationActionsCallHolder;
    this.notificationActionsHolder = notificationActionsHolder;
    this.notificationCallStatus = notificationCallStatus;
    this.notificationCallerName = notificationCallerName;
    this.notificationCallerNumberType = notificationCallerNumberType;
    this.notificationDeclineCall = notificationDeclineCall;
    this.notificationDeclineCallText = notificationDeclineCallText;
    this.notificationHolder = notificationHolder;
    this.notificationMuteText = notificationMuteText;
    this.notificationThumbnail = notificationThumbnail;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CallNotificationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CallNotificationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.call_notification, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CallNotificationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.notification_accept_call;
      ImageView notificationAcceptCall = ViewBindings.findChildViewById(rootView, id);
      if (notificationAcceptCall == null) {
        break missingId;
      }

      id = R.id.notification_actions_call_holder;
      LinearLayout notificationActionsCallHolder = ViewBindings.findChildViewById(rootView, id);
      if (notificationActionsCallHolder == null) {
        break missingId;
      }

      id = R.id.notification_actions_holder;
      LinearLayout notificationActionsHolder = ViewBindings.findChildViewById(rootView, id);
      if (notificationActionsHolder == null) {
        break missingId;
      }

      id = R.id.notification_call_status;
      TextView notificationCallStatus = ViewBindings.findChildViewById(rootView, id);
      if (notificationCallStatus == null) {
        break missingId;
      }

      id = R.id.notification_caller_name;
      TextView notificationCallerName = ViewBindings.findChildViewById(rootView, id);
      if (notificationCallerName == null) {
        break missingId;
      }

      id = R.id.notification_caller_number_type;
      TextView notificationCallerNumberType = ViewBindings.findChildViewById(rootView, id);
      if (notificationCallerNumberType == null) {
        break missingId;
      }

      id = R.id.notification_decline_call;
      ImageView notificationDeclineCall = ViewBindings.findChildViewById(rootView, id);
      if (notificationDeclineCall == null) {
        break missingId;
      }

      id = R.id.notification_decline_call_text;
      Button notificationDeclineCallText = ViewBindings.findChildViewById(rootView, id);
      if (notificationDeclineCallText == null) {
        break missingId;
      }

      RelativeLayout notificationHolder = (RelativeLayout) rootView;

      id = R.id.notification_mute_text;
      Button notificationMuteText = ViewBindings.findChildViewById(rootView, id);
      if (notificationMuteText == null) {
        break missingId;
      }

      id = R.id.notification_thumbnail;
      ImageView notificationThumbnail = ViewBindings.findChildViewById(rootView, id);
      if (notificationThumbnail == null) {
        break missingId;
      }

      return new CallNotificationBinding((RelativeLayout) rootView, notificationAcceptCall,
          notificationActionsCallHolder, notificationActionsHolder, notificationCallStatus,
          notificationCallerName, notificationCallerNumberType, notificationDeclineCall,
          notificationDeclineCallText, notificationHolder, notificationMuteText,
          notificationThumbnail);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
